name: Build and Release

on:
  push:
    tags:
      - "v*" # Trigger on version tags like v1.0.0, v1.0.1, etc.
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write # Required to create releases and upload assets

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: macos
            executable_name: ez-expense
            package_name: ez-expense-macos
          - os: windows-latest
            platform: windows
            executable_name: ez-expense.exe
            package_name: ez-expense-windows
          - os: ubuntu-latest
            platform: linux
            executable_name: ez-expense
            package_name: ez-expense-linux

    runs-on: ${{ matrix.os }}
    env:
      HAS_SIGNING_SECRETS: ${{ secrets.SIGNING_CERTIFICATE_P12_DATA != '' && secrets.SIGNING_CERTIFICATE_PASSWORD != '' && secrets.KEYCHAIN_PASSWORD != '' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv (Windows)
        if: matrix.platform == 'windows'
        run: |
          irm https://astral.sh/uv/install.ps1 | iex
          echo "$env:USERPROFILE\\.cargo\\bin" >> $env:GITHUB_PATH
        shell: pwsh

      - name: Install uv (Unix)
        if: matrix.platform != 'windows'
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        shell: bash

      - name: Install dependencies
        run: |
          uv sync --group build

      - name: Install Playwright browsers
        run: |
          uv run playwright install chromium --with-deps
      - name: Build executable (Unix)
        if: matrix.platform != 'windows'
        working-directory: deployment
        run: |
          chmod +x build/build.sh
          ./build/build.sh

      - name: Verify build output (Unix)
        if: matrix.platform != 'windows'
        run: |
          echo "Checking build output..."
          if [ -f "dist/${{ matrix.executable_name }}" ]; then
            file_size_mb=$(du -m "dist/${{ matrix.executable_name }}" | cut -f1)
            echo "✅ Executable found: ${{ matrix.executable_name }} (${file_size_mb} MB)"
            ls -la dist/
          else
            echo "❌ ERROR: ${{ matrix.executable_name }} not found!"
            echo "Contents of dist directory:"
            ls -la dist/ || echo "dist directory doesn't exist"
            exit 1
          fi

      - name: Build executable (Windows)
        if: matrix.platform == 'windows'
        run: |
          cd deployment
          .\build.bat
        shell: cmd

      - name: Verify build output (Windows)
        if: matrix.platform == 'windows'
        run: |
          echo "Checking build output..."
          echo "Current working directory:"
          pwd
          echo "Contents of current directory:"
          dir
          if (Test-Path "dist\ez-expense.exe") {
            $fileSize = (Get-Item "dist\ez-expense.exe").length / 1MB
            Write-Output "✅ Executable found: ez-expense.exe ($([math]::Round($fileSize, 2)) MB)"
            Get-ChildItem "dist\" -Recurse | Select-Object Name, Length | Format-Table
          } else {
            Write-Output "❌ ERROR: ez-expense.exe not found at dist\ez-expense.exe"
            Write-Output "Contents of dist directory:"
            if (Test-Path "dist\") {
              Write-Output "dist directory exists, contents:"
              Get-ChildItem "dist\" -Recurse | Select-Object Name, Length | Format-Table
            } else {
              Write-Output "dist directory does not exist"
            }
            Write-Output "Searching for ez-expense.exe in all subdirectories:"
            Get-ChildItem -Recurse -Name "ez-expense.exe" -ErrorAction SilentlyContinue
            exit 1
          }
        shell: pwsh

      # macOS Code Signing and Notarization
      - name: Import signing certificate (macOS)
        if: matrix.platform == 'macos' && env.HAS_SIGNING_SECRETS == 'true'
        env:
          SIGNING_CERTIFICATE_P12_DATA: ${{ secrets.SIGNING_CERTIFICATE_P12_DATA }}
          SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.SIGNING_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create certificate file from base64 encoded data
          echo "$SIGNING_CERTIFICATE_P12_DATA" | base64 --decode > certificate.p12

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain

          # Import certificate
          security import certificate.p12 -k build.keychain -P "$SIGNING_CERTIFICATE_PASSWORD" -T /usr/bin/codesign

          # Set partition list
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain

          # Clean up
          rm certificate.p12

      - name: Sign macOS app bundle
        if: matrix.platform == 'macos' && env.HAS_SIGNING_SECRETS == 'true'
        env:
          APPLE_DEVELOPER_ID_APPLICATION: ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION }}
        run: |
          if [ -d "dist/EZ-Expense.app" ]; then
            # Sign all executables and libraries in the app bundle
            find "dist/EZ-Expense.app" -type f \( -name "*.dylib" -o -name "*.so" -o -perm +111 \) -exec codesign --sign "$APPLE_DEVELOPER_ID_APPLICATION" --timestamp --options runtime {} \;

            # Sign the main executable
            codesign --sign "$APPLE_DEVELOPER_ID_APPLICATION" --timestamp --options runtime "dist/EZ-Expense.app/Contents/MacOS/ez-expense"

            # Sign the entire app bundle
            codesign --sign "$APPLE_DEVELOPER_ID_APPLICATION" --timestamp --options runtime "dist/EZ-Expense.app"

            # Verify code signing
            codesign --verify --verbose "dist/EZ-Expense.app"
            echo "✅ App bundle signed successfully"
          else
            echo "ℹ️ No app bundle found to sign"
          fi

      - name: Notarize macOS app bundle
        if: matrix.platform == 'macos' && env.HAS_SIGNING_SECRETS == 'true'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          if [ -d "dist/EZ-Expense.app" ]; then
            # Create ZIP for notarization
            cd dist
            zip -r "EZ-Expense-notarize.zip" "EZ-Expense.app"

            # Submit for notarization
            xcrun notarytool submit "EZ-Expense-notarize.zip" \
              --apple-id "$APPLE_ID" \
              --password "$APPLE_PASSWORD" \
              --team-id "$APPLE_TEAM_ID" \
              --wait

            # Staple notarization ticket
            xcrun stapler staple "EZ-Expense.app"

            # Clean up
            rm "EZ-Expense-notarize.zip"
            cd ..
            echo "✅ App bundle notarized successfully"
          else
            echo "ℹ️ No app bundle found to notarize"
          fi

      - name: Create release package
        working-directory: deployment/build
        run: |
          ./package.sh \
            --platform "${{ matrix.platform }}" \
            --executable-name "${{ matrix.executable_name }}" \
            --package-name "${{ matrix.package_name }}" \
            --output-dir "../../release-package" \
            --dist-dir "../../dist" \
            --deployment-dir ".."
        shell: bash

      - name: Create ZIP archive
        run: |
          if [ "${{ matrix.platform }}" = "windows" ]; then
            # Use PowerShell for Windows
            powershell -Command "Compress-Archive -Path 'release-package\\*' -DestinationPath '${{ matrix.package_name }}.zip'"
          else
            # Use zip for Unix systems
            cd release-package
            zip -r "../${{ matrix.package_name }}.zip" .
            cd ..
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.package_name }}
          path: |
            ${{ matrix.package_name }}.zip
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Extract version from tag
        id: extract_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Prepare release notes
        id: release_notes
        run: |
          # Read template and substitute version
          VERSION="${{ steps.extract_version.outputs.VERSION }}"
          if [ -f ".github/release-template.md" ]; then
            sed "s/\${VERSION}/$VERSION/g" .github/release-template.md > release-notes.md
          else
            echo "## EZ-Expense $VERSION" > release-notes.md
            echo "" >> release-notes.md
            echo "### Downloads" >> release-notes.md
            echo "- **macOS**: Download \`ez-expense-macos.zip\`" >> release-notes.md
            echo "- **Windows**: Download \`ez-expense-windows.zip\`" >> release-notes.md
            echo "- **Linux**: Download \`ez-expense-linux.zip\`" >> release-notes.md
            echo "" >> release-notes.md
            echo "### Setup" >> release-notes.md
            echo "1. **All platforms**: Extract ZIP file, copy \`.env.template\` to \`.env\`, edit with your API keys, then run the executable" >> release-notes.md
          fi

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.extract_version.outputs.VERSION }}
          name: EZ-Expense ${{ steps.extract_version.outputs.VERSION }}
          body_path: release-notes.md
          draft: false
          prerelease: false
          files: |
            artifacts/ez-expense-macos/ez-expense-macos.zip
            artifacts/ez-expense-windows/ez-expense-windows.zip
            artifacts/ez-expense-linux/ez-expense-linux.zip
